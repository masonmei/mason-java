<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:jdbc="http://www.springframework.org/schema/jdbc"
    xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
            http://www.springframework.org/schema/jdbc
            http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-3.0.xsd">

    <!-- scans the classpath for annotated components (including @Repostory and @Service that will be auto-registered as 
        Spring beans -->
    <context:component-scan base-package="org.personal.mason.job"/>

    <!-- methods or classes needing to run in a complete transaction will be annotated with Transactional -->
    <tx:annotation-driven/>

    <!-- Creates a data source that can provide a connection to in-memory embedded database populated with test data see: 
        http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/ch12s08.html -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://192.168.1.100/jobhunting?useUnicode=true&amp;characterEncoding=UTF-8"/>
        <property name="username" value="root"/>
        <property name="password" value="rdisfun"/>
    </bean>


    <!-- This will ensure that hibernate or jpa exceptions are automatically translated into Spring's generic DataAccessException 
        hierarchy for those classes annotated with Repository For example see PersonDaoJpa -->
    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>

    <!-- JPA Entity Manager Factory -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
        p:dataSource-ref="dataSource" p:persistenceXmlLocation="classpath:META-INF/persistence.xml"
        p:persistenceUnitName="jobhunting"/>


    <!-- bean post-processor for JPA annotations -->
    <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"/>


    <!-- Transaction Config -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"
        p:entityManagerFactory-ref="entityManagerFactory"/>

    <bean id="entityManager" class="org.springframework.orm.jpa.support.SharedEntityManagerBean"
        p:entityManagerFactory-ref="entityManagerFactory"/>

    <!-- use declarative transaction management -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

    <bean id="passwordEncryptor" class="org.jasypt.util.password.ConfigurablePasswordEncryptor"/>
    
    <bean id="userDao" class="org.personal.mason.job.dao.UserDao">
        <property name="entityManager" ref="entityManager"/>
        <property name="clazz" value="org.personal.mason.job.domain.User"/>
    </bean>


</beans>